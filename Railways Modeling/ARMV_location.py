import networkx as nx
G = nx.Graph()
G.add_node("RMR")
G.add_node("KPV")
G.add_node("MB")
G.add_node("KGM")
G.add_node("LKU")
G.add_node("RMU")
G.add_node("TPU")
G.add_node("PBE")
G.add_node("SZP")
G.add_node("IZN")
G.add_node("KSJ")
G.add_node("MTJ")
G.add_node("CNB")
'''
G.add_node(MLN)
G.add_node(STP)
G.add_node(LJN)
G.add_node(BUW)
G.add_node(BBK)
G.add_node(BRK)
G.add_node(GD)
G.add_node(MUR)
G.add_node(AY)
G.add_node(NTV)
G.add_node(ANDN)
G.add_node(GKP)
G.add_node(PNYA)
G.add_node(CPJ)
G.add_node(THE)
G.add_node(MHC)
G.add_node(CPR)
G.add_node(DDA)
G.add_node(SV)
G.add_node(BTE)
G.add_node(IAA)
G.add_node(PEP)
G.add_node(MAU)
G.add_node(SHG)
G.add_node(ARJ)
G.add_node(JNU)
G.add_node(MUV)
G.add_node(PRYJ)
'''
G.add_edge("RMR","KPV", weight = 27)
G.add_edge("KPV","MB", weight = 50)
G.add_edge("KPV","LKU", weight = 58)
G.add_edge("LKU","KGM", weight = 22)
G.add_edge("LKU","RMU", weight = 67)
G.add_edge("LKU","IZN", weight = 65)
G.add_edge("IZN","PBE", weight = 39)
G.add_edge("PBE","TPU", weight = 63)
G.add_edge("PBE","SZP", weight = 84)
G.add_edge("KSJ","MTJ", weight = 103)
G.add_edge("KSJ","CNB", weight = 247)
'''
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
G.add_edge(,, weight = )
'''
length = nx.multi_source_dijkstra_path_length(G, {"KSJ", "LKU"})
for node in G.nodes:
	print(f"{node}: {length[node]}")

'''
print(" ")

length = nx.multi_source_dijkstra_path_length(G, {"IZN"})
for node in G.nodes:
	print(f"{node}: {length[node]}")
print(" ")


length = nx.multi_source_dijkstra_path_length(G, {"LKU"})
for node in G.nodes:
	print(f"{node}: {length[node]}")
print(" ")


length = nx.multi_source_dijkstra_path_length(G, {"PBE"})
for node in G.nodes:
	print(f"{node}: {length[node]}")
print(" ")


length = nx.multi_source_dijkstra_path_length(G, {"KPV"})
for node in G.nodes:
	print(f"{node}: {length[node]}")
print(" ")


#bfs = nx.algorithms.traversal.breadth_first_search.descendants_at_distance(G, "IZN", 100)
#print(bfs)
#print(G.edges(["LKU"]))
#print(nx.algorithms.tree.recognition.is_tree(G))
#print(nx.algorithms.tree.recognition.is_forest(G))

'''

print(nx.algorithms.covering.min_edge_cover(G))